plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.2'
    id 'io.spring.dependency-management' version '1.1.0'
    id "org.asciidoctor.jvm.convert" version "3.3.2"
}

group = 'rastle.dev'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    asciidoctorExtensions

    compileOnly {
        extendsFrom annotationProcessor
    }
}


repositories {
    mavenCentral()
}

dependencies {
    // thymeleaf
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    // web
    implementation 'org.springframework.boot:spring-boot-starter-web'
    // configuration
    implementation 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    // 스프링 데이터 JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // mongodb
    implementation 'org.mongodb:mongo-java-driver:3.12.14'
    implementation 'org.springframework.data:spring-data-mongodb'
    // 스프링 레디스
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    // 이메일 모듈
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    // Validation 모듈 추가
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    // 스프링 시큐리티
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.security:spring-security-test'
    // MyBatis
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.1'
    // OAuth
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    // Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.3'
    // RestDocs
    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    // S3
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
    // actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    // prometheus
    implementation 'io.micrometer:micrometer-core'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    // cookie
    implementation 'jakarta.servlet:jakarta.servlet-api:6.0.0'
    // JWT
    compileOnly group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.2'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.2'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.2'
    // QueryDsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    implementation "com.querydsl:querydsl-core:5.0.0"
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    // boot pay
    implementation 'io.github.bootpay:backend:2.2.1'
    // geoip2
    implementation group: 'com.maxmind.geoip2', name: 'geoip2', version: '2.15.0'
    // hibernate cache
    implementation 'org.springframework.boot:spring-boot-starter-cache'

    // MySql
    runtimeOnly 'mysql:mysql-connector-java'


    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    // MockMvc
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    // Junit
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation ('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.2'
    // 스프링 시큐리티 테스트
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    // Mockito
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'org.mockito:mockito-junit-jupiter'
    // Hamcrest
    testImplementation 'org.hamcrest:hamcrest-library'

    //Apache Commons Lang
    implementation 'org.apache.commons:commons-lang3:3.12.0'

    // Jackson
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.0'
}

test {
    useJUnitPlatform()
}

// QueryDsl 빌드 옵션 (선택)
// QueryDsl 디렉토리 경로
def querydslDir = "src/main/generated"

// 경로 추가 >> QueryDsl 소스 코드 컴파일 시 빌드
sourceSets {
    main.java.srcDirs += [ querydslDir ]
}

// 컴파일 설정(AnnotationProcessor가 생성하는 소스코드를 해당 경로로 설정)
tasks.withType(JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
}

// clean실행 시 마지막 작업으로 디렉토리(QClass) 삭제 >> 충돌 방지
clean.doLast {
    file(querydslDir).deleteDir()
}


bootJar {
    archiveFileName = "backend_app.jar"
}


